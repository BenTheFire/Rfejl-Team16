// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketMaster.Objects;

#nullable disable

namespace TicketMaster.Migrations.MySql
{
    [DbContext(typeof(TicketmasterContext))]
    [Migration("20250507134910_Guh5")]
    partial class Guh5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LocationVendor", b =>
                {
                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.Property<int>("VendorsId")
                        .HasColumnType("int");

                    b.HasKey("LocationsId", "VendorsId");

                    b.HasIndex("VendorsId");

                    b.ToTable("LocationVendor");
                });

            modelBuilder.Entity("TicketMaster.Objects.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("TicketMaster.Objects.Credit", b =>
                {
                    b.Property<int>("OfMovieId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("WhoIsId")
                        .HasColumnType("int");

                    b.HasIndex("OfMovieId");

                    b.HasIndex("WhoIsId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("TicketMaster.Objects.CustomerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("OfUserId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("OfUserId");

                    b.ToTable("CustomerData");
                });

            modelBuilder.Entity("TicketMaster.Objects.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TicketMaster.Objects.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ImageSource")
                        .HasColumnType("longtext");

                    b.Property<int>("ImdbId")
                        .HasColumnType("int");

                    b.Property<int>("LengthInSeconds")
                        .HasColumnType("int");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("TicketMaster.Objects.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("TicketMaster.Objects.Screening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("InLocationId")
                        .HasColumnType("int");

                    b.Property<int>("OfMovieId")
                        .HasColumnType("int");

                    b.Property<int>("SeatsTaken")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("InLocationId");

                    b.HasIndex("OfMovieId");

                    b.ToTable("Screenings");
                });

            modelBuilder.Entity("TicketMaster.Objects.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ByVendorId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OfScreeningId")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PurchaseTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Seat")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ByVendorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OfScreeningId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketMaster.Objects.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TicketMaster.Objects.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("LocationVendor", b =>
                {
                    b.HasOne("TicketMaster.Objects.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketMaster.Objects.Vendor", null)
                        .WithMany()
                        .HasForeignKey("VendorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TicketMaster.Objects.Credit", b =>
                {
                    b.HasOne("TicketMaster.Objects.Movie", "OfMovie")
                        .WithMany()
                        .HasForeignKey("OfMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketMaster.Objects.Person", "WhoIs")
                        .WithMany()
                        .HasForeignKey("WhoIsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OfMovie");

                    b.Navigation("WhoIs");
                });

            modelBuilder.Entity("TicketMaster.Objects.CustomerData", b =>
                {
                    b.HasOne("TicketMaster.Objects.User", "OfUser")
                        .WithMany()
                        .HasForeignKey("OfUserId");

                    b.Navigation("OfUser");
                });

            modelBuilder.Entity("TicketMaster.Objects.Screening", b =>
                {
                    b.HasOne("TicketMaster.Objects.Location", "InLocation")
                        .WithMany()
                        .HasForeignKey("InLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketMaster.Objects.Movie", "OfMovie")
                        .WithMany()
                        .HasForeignKey("OfMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InLocation");

                    b.Navigation("OfMovie");
                });

            modelBuilder.Entity("TicketMaster.Objects.Ticket", b =>
                {
                    b.HasOne("TicketMaster.Objects.Vendor", "ByVendor")
                        .WithMany()
                        .HasForeignKey("ByVendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketMaster.Objects.CustomerData", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketMaster.Objects.Screening", "OfScreening")
                        .WithMany()
                        .HasForeignKey("OfScreeningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ByVendor");

                    b.Navigation("Customer");

                    b.Navigation("OfScreening");
                });
#pragma warning restore 612, 618
        }
    }
}
