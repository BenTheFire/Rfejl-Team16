@page "/admin/edit/movies"
@using Ticketmaster.Data.Services.Interfaces
@using Ticketmaster.Objects
@inject IMovieService MS
@using Ticketmaster.Data.Services.StaticServiceMethods
<body>
    <div class="forms">
        <div class="container my-4">
            <div class="row g-4">
                <div class="col-12 col-md-6 col-xl-3">
                    <div class="formContainer">
                        <h4>Create movie</h4>
                        <form onsubmit="@createMovie">
                            <input type="text" class="form-control mb-2" placeholder="Title of movie" @bind-value="M.Title" />
                            <input type="text" class="form-control mb-2" placeholder="Description of movie" @bind-value="M.Description" />
                            <input type="number" class="form-control mb-2" placeholder="Length in seconds" @bind-value="M.LengthInSeconds" />
                            <input type="text" class="form-control mb-2" placeholder="Image source link" @bind-value="M.ImageSource" />
                            <input type="text" class="form-control mb-2" placeholder="Release date" @bind-value="M.ReleaseDate" />
                            <input type="number" class="form-control mb-2" placeholder="IMDb ID" @bind-value="M.ImdbId" />
                            <button type="submit" class="btn btn-success w-100">Create Movie</button>
                        </form>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-xl-3">
                    <div class="formContainer">
                        <h4>Fetch movie from OMBD by title</h4>
                        <form onsubmit="@fetchMovie">
                            <input type="text" class="form-control mb-2" placeholder="Title of movie" @bind-value="M.Title" />
                            <button type="submit" class="btn btn-success mb-2 w-100">Fetch Movie</button>
                            <div class="form-check">
                                <InputCheckbox @bind-Value="force" class="form-check-input" id="forceCheck" />
                                <label class="form-check-label" for="forceCheck">Force</label>
                            </div>
                        </form>
                        <p>@text</p>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-xl-3">
                    <div class="formContainer">
                        <h4>Update movie</h4>
                        <ul>
                            @foreach (var movie in movies)
                            {
                                <li>
                                    <a href="@HrefMovieLink(movie)">@movie.Title (@movie.ReleaseDate)</a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                <div class="col-12 col-md-6 col-xl-3">
                    <div class="formContainer">
                        <h4>Delete movie</h4>
                        <form onsubmit="@deleteMovie">
                            <input type="text" class="form-control mb-2" placeholder="Movie's Title to delete" @bind-value="M.Title" />
                            <button type="submit" class="btn btn-danger w-100">Delete Movie</button>
                        </form>
                        @if (isNotInDBDelete)
                        {
                            <p>Movie not in database</p>
                        }
                        else if (successDelete)
                        {
                            <p>Movie deleted from database</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
@code {
    private bool isInDBAdd = false;
    private bool successAdd = false;
    private bool isNotInDBDelete = false;
    private bool successDelete = false;
    private bool force = false;
    private bool doesntExistAdd = false;
    private string text = "";
    private Movie M = new();
    private List<Movie> movies = new();

    private string HrefMovieLink(Movie movie) => $"admin/edit/movie/{(movie.ImdbId):D7}";


    protected override async Task OnInitializedAsync()
    {
        movies = await MS.GetMovies();
    }

    private void ResetFetchMovieStatus()
    {
        isInDBAdd = false;
        successAdd = false;
        doesntExistAdd = false;
    }

    private async Task fetchMovie() {
        ResetFetchMovieStatus();
        if (await MS.IsInDBByTitle(M.Title))
        {
            isInDBAdd = true;
        }
        if (!force)
        {
            if (isInDBAdd)
            {
                text = "Movie already in database";
                return;
            }
            await foreach (var item in OmdbSource.FetchMovieByTitle(M.Title))
            {
                if (item == null)
                {
                    text = $"Movie with title {M.Title} doesn't exist in Omdb";
                    doesntExistAdd = true;
                    return;
                }
                await MS.CreateMovie(item);
                isInDBAdd = false;
                successAdd = true;
                doesntExistAdd = false;
                text = $"Movie {M.Title} added succesfully";
                return;
            }
        }
        else
        {
            if (isInDBAdd)
            {
                await MS.UpdateMovieFromOmdbByTitle(M.Title);
                successAdd = true;
                doesntExistAdd = false;
                text = $"Movie {M.Title} updated forcefully";
                return;
            }
            else
            {
                await foreach (var item in OmdbSource.FetchMovieByTitle(M.Title))
                {
                    if (item == null)
                    {
                        doesntExistAdd = true;
                        text = $"Movie {M.Title} doesn't exist in Omdb";
                        return;
                    }
                    await MS.CreateMovie(item);
                    successAdd = true;
                    doesntExistAdd = false;
                    text = $"Movie {M.Title} created forcefully";
                    return;
                }
            }
        }
    }
    private async Task createMovie()
    {
        await MS.CreateMovie(M);
    }

    private async Task updateMovie()
    {
        await MS.UpdateMovie(M);
    }

    private async Task deleteMovie()
    {
        if (!await MS.IsInDBByTitle(M.Title))
        {
            isNotInDBDelete = true;
            return;
        }
        isNotInDBDelete = false;
        await MS.DeleteMovieByTitle(M.Title);
        successDelete = true;
    }
}
<style>
    .forms {
        align-content: normal;
        justify-content: normal;
        gap: 3rem; 
    }
    .formContainer {
        background: #23272f;
        border-radius: 1rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        border: 1px solid #2c313c;
        color: #f8f9fa;
        padding: 1.5rem 1.5rem 1rem 1.5rem;
        margin: 0.5rem 0;
        min-height: 100%;
    }

        .formContainer h4 {
            margin-bottom: 1rem;
            color: #aee1f9;
        }


    .formContainer {
        display: flex;
        flex-direction: column;
        min-width: 220px;
        padding: 1.5rem 1.5rem 1rem 1.5rem;
        margin: 0.5rem 0;
        background: #23272f;
        border-radius: 1rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        border: 1px solid #2c313c;
        color: #f8f9fa;
    }

        .formContainer h4 {
            margin-bottom: 1rem;
            color: #aee1f9;
        }

        .formContainer input,
        .formContainer button {
            margin-bottom: 0.7rem;
            border-radius: 0.4rem;
            border: 1px solid #444;
            padding: 0.5rem;
            background: #181a20;
            color: #f8f9fa;
        }

        .formContainer button {
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s;
        }

    .buttonDelete {
        background-color: #e74c3c;
    }

    .buttonAdd {
        background-color: #27ae60;
    }

    .buttonEdit {
        background-color: #2980b9;
    }
</style>
