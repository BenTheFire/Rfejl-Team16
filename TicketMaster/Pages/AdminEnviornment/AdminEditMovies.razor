@page "/admin/edit/movies"
@using Ticketmaster.Data.Services.Interfaces
@using Ticketmaster.Objects
@inject IMovieService MS
@inject IScreeningService SS
@using Ticketmaster.Data.Services.StaticServiceMethods
@using Ticketmaster.Extra
@inject ThemeService ThemeService
<body>
    <div class="@ThemeClass">
        <div class="admin-forms">
            <div class="admin-container my-4">
                <div class="admin-section row g-4">
                    <div class="admin-col">
                        <div class="admin-form">
                            <h4 style="color: var(--accent-text-color);">Create movie</h4>
                            <form onsubmit="@createMovie">
                                <input type="text" class="editor-input" placeholder="Title of movie" @bind-value="M.Title" />
                                <input type="text" class="editor-input" placeholder="Description of movie" @bind-value="M.Description" />
                                <input type="number" class="editor-input" placeholder="Length in seconds" @bind-value="M.LengthInSeconds" />
                                <input type="text" class="editor-input" placeholder="Image source link" @bind-value="M.ImageSource" />
                                <input type="text" class="editor-input" placeholder="Release date" @bind-value="M.ReleaseDate" />
                                <input type="number" class="editor-input" placeholder="IMDb ID" @bind-value="M.ImdbId" />
                                <button type="submit" class="editor-submit-btn success full-width">Create Movie</button>
                            </form>
                        </div>
                    </div>
                    <div class="admin-col">
                        <div class="admin-form">
                            <h4 style="color: var(--accent-text-color);">Fetch movie from OMBD by title</h4>
                            <form onsubmit="@fetchMovie">
                                <input type="text" class="editor-input" placeholder="Title of movie" @bind-value="M.Title" />
                                <input type="number" class="editor-input" placeholder="Imdb ID of movie" @bind-value="M.ImdbId" />
                                <button type="submit" class="editor-submit-btn success full-width">Fetch Movie</button>
                                <div class="editor-checkbox">
                                    <InputCheckbox @bind-Value="force" class="checkbox" id="forceCheck" />
                                    <label class="checkbox-label" for="forceCheck">Force</label>
                                </div>
                            </form>
                            <p>@textAdd</p>
                        </div>
                    </div>
                    <div class="admin-col">
                        <div class="admin-form">
                            <h4 style="color: var(--accent-text-color);">Update movie</h4>
                            <ul class="admin-link-list">
                                @foreach (var movie in movies)
                                {
                                    <li>
                                        <a href="@HrefMovieLink(movie)">@movie.Title (@movie.ReleaseDate)</a>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="admin-col">
                        <div class="admin-form">
                            <h4 style="color: var(--accent-text-color);">Delete movie</h4>
                            <form onsubmit="@deleteMovie">
                                <input type="text" class="editor-input" placeholder="Movie's Title to delete" @bind-value="M.Title" />
                                <input type="number" class="editor-input" placeholder="Movie's IMDb ID to delete" @bind-value="M.ImdbId" />
                                <button type="submit" class="editor-submit-btn danger full-width">Delete Movie</button>
                            </form>
                            @textDelete
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>
@code {
    private bool isInDBAdd = false;
    private bool successAdd = false;
    private bool isNotInDBDelete = false;
    private bool successDelete = false;
    private bool force = false;
    private bool doesntExistAdd = false;
    private string textAdd = "";
    private string textDelete = "";
    private Movie M = new();
    private List<Movie> movies = new();

    private string HrefMovieLink(Movie movie) => $"admin/edit/movie/{(movie.ImdbId):D7}";


    protected override async Task OnInitializedAsync()
    {
        movies = await MS.GetMoviesAsync();
    }

    private void ResetFetchMovieStatus()
    {
        isInDBAdd = false;
        successAdd = false;
        doesntExistAdd = false;
    }

    private async Task fetchMovie() {
        ResetFetchMovieStatus();
        if (M.ImdbId == 0 && M.Title.IsNullOrEmpty())
        {
            textAdd = "Please provide a title or IMDb ID to fetch the movie.";
            return;
        }
        if (await MS.IsInDBByTitle(M.Title) || await MS.IsInDBByImdbId(M.ImdbId.ToString()))
        {
            isInDBAdd = true;
            textAdd = "Movie already in database";
        }
        else if (M.ImdbId != 0)
        {
            //imdbid fetch

            if (!force)
            {
                if (isInDBAdd) return;
                await foreach (var item in OmdbSource.FetchMovieByTitle(M.Title))
                {
                    if (item == null)
                    {
                        textAdd = $"Movie with Imdb ID {M.ImdbId} doesn't exist in Omdb";
                        doesntExistAdd = true;
                        return;
                    }
                    await MS.CreateMovie(item);
                    isInDBAdd = false;
                    successAdd = true;
                    doesntExistAdd = false;
                    textAdd = $"Movie {M.ImdbId} added succesfully";
                    return;
                }
            }
            else
            {
                if (isInDBAdd)
                {
                    await MS.UpdateMovieFromOmdbByTitle(M.Title);
                    successAdd = true;
                    doesntExistAdd = false;
                    textAdd = $"Movie {M.ImdbId} updated forcefully";
                    return;
                }
                else
                {
                    await foreach (var item in OmdbSource.FetchMovieByTitle(M.Title))
                    {
                        if (item == null)
                        {
                            doesntExistAdd = true;
                            textAdd = $"Movie {M.ImdbId} doesn't exist in Omdb";
                            return;
                        }
                        await MS.CreateMovie(item);
                        successAdd = true;
                        doesntExistAdd = false;
                        textAdd = $"Movie {M.ImdbId} created forcefully";
                        return;
                    }
                }
            }
        }
        else
        {
            //title fetch
            if (!force)
            {
                if (isInDBAdd) return;
                await foreach (var item in OmdbSource.FetchMovieByTitle(M.Title))
                {
                    if (item == null)
                    {
                        textAdd = $"Movie with title {M.Title} doesn't exist in Omdb";
                        doesntExistAdd = true;
                        return;
                    }
                    await MS.CreateMovie(item);
                    isInDBAdd = false;
                    successAdd = true;
                    doesntExistAdd = false;
                    textAdd = $"Movie {M.Title} added succesfully";
                    return;
                }
            }
            else
            {
                if (isInDBAdd)
                {
                    await MS.UpdateMovieFromOmdbByTitle(M.Title);
                    successAdd = true;
                    doesntExistAdd = false;
                    textAdd = $"Movie {M.Title} updated forcefully";
                    return;
                }
                else
                {
                    await foreach (var item in OmdbSource.FetchMovieByTitle(M.Title))
                    {
                        if (item == null)
                        {
                            doesntExistAdd = true;
                            textAdd = $"Movie {M.Title} doesn't exist in Omdb";
                            return;
                        }
                        await MS.CreateMovie(item);
                        successAdd = true;
                        doesntExistAdd = false;
                        textAdd = $"Movie {M.Title} created forcefully";
                        return;
                    }
                }
            }
        }



    }
    private async Task createMovie()
    {
        await MS.CreateMovie(M);
    }

    private async Task updateMovie()
    {
        await MS.UpdateMovie(M);
    }

    private async Task deleteMovie()
    {
        foreach (Screening s in await MS.FetchScreenings(M.ImdbId.ToString())){
            if (DateTime.Now > s.Time & DateTime.Now < s.Time.AddSeconds(M.LengthInSeconds)) { textDelete = "Can't delete movie as screening is ongoing"; }
        }
        if (string.IsNullOrEmpty(M.Title) && M.ImdbId == 0)
        {
            textDelete = "Please provide a title or IMDb ID to delete the movie.";
            return;
        } 
        else if (!string.IsNullOrEmpty(M.Title))
        {
            if (!await MS.IsInDBByTitle(M.Title))
            {
                isNotInDBDelete = true;
                textDelete = $"Movie with title {M.Title} doesn't exist in database";
                return;
            }
            isNotInDBDelete = false;
            await MS.DeleteMovieByTitle(M.Title);
            successDelete = true;
            textDelete = $"Movie {M.Title} deleted successfully";
            return;
        }
        else
        {
            if (!await MS.IsInDBByImdbId(M.ImdbId.ToString()))
            {
                isNotInDBDelete = true;
                textDelete = $"Movie with IMDb ID {M.ImdbId} doesn't exist in database";
                return;
            }
            isNotInDBDelete = false;
            await MS.DeleteMovieByImdbId(M.ImdbId.ToString());
            successDelete = true;
            textDelete = $"Movie {M.Title} deleted successfully";
            return;
        }

    }
}
@code {
    private string ThemeClass => ThemeService.IsLightTheme ? "light-theme" : "dark-theme";

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += ThemeChanged;
    }

    private async Task ThemeChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= ThemeChanged;
    }
}

<style>
    .admin-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .admin-forms {
        padding: 1rem;
    }

    .admin-section {
        display: flex;
        flex-wrap: wrap;
        gap: 2rem;
    }

    .admin-col {
        flex: 1 1 300px;
    }

    /* Card / Box Design */
    .admin-form {
        background-color: var(--card-bg, #222);
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 14px rgba(0, 0, 0, 0.25);
        transition: background-color 0.3s ease;
        color: var(--color-purple)
    }

    .admin-forms {
        background-color: var(--bg-color);
    }

    .light-theme .admin-form {
        background-color: #f9f9f9;
        box-shadow: 0 4px 14px rgba(0, 0, 0, 0.1);
    }

    /* Inputs */
    .editor-input {
        display: block;
        width: 100%;
        padding: 0.6rem 1rem;
        font-size: 1rem;
        margin-bottom: 1rem;
        border-radius: 8px;
        border: 1px solid #ccc;
        background-color: var(--bg-color, #1e1e1e);
        color: var(--color-purple);
        transition: border-color 0.3s, background-color 0.3s;
    }

    .light-theme .editor-input {
        background-color: #fff;
    }

    /* Buttons */
    .editor-submit-btn {
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        color: #fff;
    }

        .editor-submit-btn.success {
            background-color: #3b82f6;
        }

        .editor-submit-btn.danger {
            background-color: #ef4444;
        }

        .editor-submit-btn:hover {
            filter: brightness(1.1);
        }

    .full-width {
        width: 100%;
    }

    /* Checkbox */
    .editor-checkbox {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .checkbox {
        width: 18px;
        height: 18px;
    }

    .checkbox-label {
        font-size: 0.95rem;
        color: var(--text-color, #fff);
    }

    .light-theme .checkbox-label {
        color: #000;
    }

    /* Link List */
    .admin-link-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .admin-link-list li {
            margin-bottom: 10px;
        }

        .admin-link-list a {
            text-decoration: none;
            color: var(--accent-text-color);
            font-weight: 600;
            transition: color 0.3s ease;
        }

            .admin-link-list a:hover {
                color: var(--color-blue, #3b82f6);
            }
</style>
