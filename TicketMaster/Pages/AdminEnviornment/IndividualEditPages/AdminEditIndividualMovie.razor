@page "/admin/edit/movie/{imdbId}"
@using Ticketmaster.Data.Services.Interfaces
@using Ticketmaster.Data.DTOs
@using Ticketmaster.Objects
@inject IMovieService MS
@inject NavigationManager NavigationManager
@layout MainLayout
@inherits LayoutComponentBase
@inject ThemeService ThemeService
<body>
    <CascadingAuthenticationState>
        <AuthorizeView Roles="Admin">
            <Authorized>
                @if (movieData != null)
                {
                    <div class="movie-editor-wrapper">
                        <div class="movie-editor-container my-4">
                            <div class="row g-4">
                                <div class="movie-editor-poster" style="width: fit-content">
                                    <img src="@movieData.ImageSource" alt="@movieData.Title Poster" class="poster" />
                                </div>
                                <div class="movie-editor-form" style="width: 70%">
                                    <form onsubmit="@UpdateMovie">
                                        <p>Image source link</p>
                                        <input type="text" class="form-control mb-3" placeholder="Image source link" @bind-value="movieData.ImageSource" title="Image source link" />
                                        <p>Title of movie</p>
                                        <input type="text" class="form-control mb-3" placeholder="Title of movie" @bind-value="movieData.Title" title="Title of movie" />
                                        <p>Description of movie</p>
                                        <textarea type="text" class="form-control mb-3" placeholder="Description of movie" @bind="movieData.Description" title="Description of movie" />
                                        <p>Length in seconds</p>
                                        <input type="number" class="form-control mb-3" placeholder="Length in seconds" @bind-value="movieData.LengthInSeconds" />
                                        <p>Release date (year)</p>
                                        <input type="text" class="form-control mb-3" placeholder="Release date" @bind-value="movieData.ReleaseDate" title="Release date (year)" />
                                        <p>IMDb ID</p>
                                        <input type="number" class="form-control mb-3" placeholder="IMDb ID" @bind-value="movieData.ImdbId" title="IMDb ID" />
                                        <button type="submit">Update movie</button>
                                    </form>
                                    <form onsubmit="@deleteMovie">
                                        <button type="submit">Delete Movie</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div style="display: flex; justify-content: center; align-items: center; height: 100vh">
                        <div>
                            <h2>Loading...</h2>
                            <img src=".\Loading.gif" alt="..." style="width:128px;height:128px" />
                        </div>
                    </div>

                }
            </Authorized>
            <NotAuthorized>
                <div style="margin:auto"><h1>403 Forbidden</h1></div>
            </NotAuthorized>
        </AuthorizeView>
    </CascadingAuthenticationState>
</body>

@code {
    [Parameter] public string ImdbId { get; set; }

    public Movie movieData;
    public List<Casting> castData = new();
    public List<Screening> screeningData = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await MS.FetchMovieDataByImdbIdAsync(ImdbId);
        movieData = result.Movie;
        castData = result.Cast;
        screeningData = await MS.FetchScreenings(ImdbId);
        // writerName = castData.Where(o => o.Role == "Writer").Select(o => o.Person.Name).FirstOrDefault();
        // directorName = castData.Where(o => o.Role == "Director").Select(o => o.Person.Name).FirstOrDefault();
    }

    private async Task UpdateMovie()
    {
        await MS.UpdateMovie(movieData);
    }
    private async Task deleteMovie()
    {
        await MS.DeleteMovieByImdbId(ImdbId);
        movieData = null;
        NavigationManager.NavigateTo("/admin/edit/movies");
    }
    //public string HrefScreeningLink(Screening screening) => $"/screening/{screening.Id}";
}
@code {
    private string ThemeClass => ThemeService.IsLightTheme ? "light-theme" : "dark-theme";

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += ThemeChanged;
    }

    private async Task ThemeChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= ThemeChanged;
    }
}
