@page "/admin/edit/person/{personId}"
@using Ticketmaster.Data.Services.Interfaces
@using Ticketmaster.Objects
@inject IPeopleService PS
@inject ICreditService CS
@inject IMovieService MS
@inject NavigationManager NavigationManager

<body>
    @if(P != null)
    {
        <a href="/admin/edit/people">Go back</a>
        <form onsubmit="@updatePerson">
            <p>Name</p>
            <input type="text" placeholder="Name of Person" @bind-value="P.Name" />
            <p>Birth date</p>
            <input type="date" placeholder="Birthday of Person" @bind-value="P.BirthDate" />
            <p>Nationality</p>
            <input type="text" placeholder="Nationality of Person" @bind-value="P.Nationality" />
            <button type="submit" >Update Person</button>
        </form>
        <form onsubmit="@deletePerson">
            <button type="submit">Delete Person</button>
        </form>
        //todo add a form to connect this person to a movie with a role
        <form onsubmit="@addRole">
            <p>Movie to add to</p>
            <select @bind="@movieId">
                <option value="0">-- Select a movie --</option>
                @foreach (var movie in movies)
                {
                    <option value="@movie.Id">@movie.Title (@movie.ReleaseDate)</option>
                }
            </select>
            <p>Role</p>
            <p>
                <input type="text" placeholder="Role name" @bind-value="@roleName" />
            </p>
            <button type="submit">Create role</button>
            <p>@text</p>
        </form>
        <div>
            <h4>Delete role</h4>
            <form>
                @if (credits != null)
                {
                    foreach (var credit in credits)
                    {
                        <p>
                            <button type="button" @onclick="() => deleteCredit(credit)">@credit.Role in @credit.OfMovie.Title</button>
                        </p>
                    }
                }
            </form>
        </div>
    } else
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh">
            <div>
                <h2>Loading...</h2>
                <img src=".\Loading.gif" alt="..." style="width:128px;height:128px" />
            </div>
        </div>
    }
</body>

@code {
    [Parameter] public string PersonId { get; set; }
    private Person P = new();    
    private List<Movie> movies = new();
    private List<Credit> credits = new();
    private int movieId;
    private string roleName;
    private string text;
    protected override async Task OnInitializedAsync()
    {
        // Fetch the person data using the PersonId
        var person = await PS.GetPersonById(Convert.ToInt16(PersonId));
        if (person != null)
        {
            P = person;
        }
        movies = await MS.GetMoviesAsync();
        credits = await CS.GetCreditsByPersonId(P.Id);
    }
    private async Task updatePerson()
    {
        P.Id = Convert.ToInt16(PersonId); // Ensure the ID is set for the update
        await PS.UpdatePerson(P);
        await OnInitializedAsync();
    }
    private async Task deletePerson()
    {
        await PS.DeletePerson(P.Id);
        P = null;
        NavigationManager.NavigateTo("/admin/edit/people");
    }
    private async Task addRole()
    {
        if (movieId == 0)
        {
            text = "Please select a movie.";
            return;
        }
        var movie = await MS.GetMovieByIdAsync(movieId);
        if (movie != null)
        {
            await CS.CreateCredit(new Credit()
            {
                OfMovie = movie,
                WhoIs = P,
                Role = roleName
                });
        }
        text = $"Created role ({roleName}) for {P.Name} to Movie {movie.Title}";
        await OnInitializedAsync();
    }
    private async Task deleteCredit(Credit credit)
    {
        await CS.DeleteCredit(credit.Id);
        credits = await CS.GetCreditsByPersonId(P.Id);
    }
}
