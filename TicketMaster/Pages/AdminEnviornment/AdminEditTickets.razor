@page "/admin/edit/tickets"
@using Ticketmaster.Data.Services.Interfaces
@using Ticketmaster.Objects
@using Ticketmaster.Data.DTOs
@using Ticketmaster.Extra
@inject ITicketService TS
@inject IScreeningService SS
@inject ICustomerService CS
<body>
    <div class="forms">
        <div class="formContainer my-2">
            <div class="row g-4">
                <div class="col-12 col-md-6">
                    <div class="formContainer">
                        <h4>Create ticket</h4>
                        <form onsubmit="@createTicket">
                            <p>Screening</p>
                            <p>
                                <select @bind="@screeningId" class="form-control mb-2">
                                    @foreach (var screening in screenings)
                                    {
                                        <option value="@screening.Id">@screening.Id --> @screening.OfMovie.Title (@screening.Time) in @screening.InLocation.Name</option>
                                    }
                                </select>
                            </p>
                            <p>Customer</p>
                            <p>
                                <select @bind="@customerId" class="form-control mb-2">
                                    @foreach (var customer in customers)
                                    {
                                        <option value="@customer.Id">@customer.Email ({@customer.OfUser.UserName.IsNullOrEmpty() ? "" : @customer.OfUser.UserName)</option>
                                    }
                                </select>
                            </p>
                            <p>Price</p>
                            <p>
                                <input type="number" class="form-control mb-2" placeholder="Price of ticket" @bind-value="T.Price" />
                            </p>
                            <p>Seat position</p>
                            <p>
                                <input type="text" class="form-control mb-2" placeholder="Seat position" @bind-value="T.Seat" />
                            </p>
                            <p>Status (0, 1, 2)</p>
                            <p>
                                <input type="number" class="form-control mb-2" placeholder="Status (0, 1, 2)" @bind-value="T.Status" />
                            </p>
                            <!--vendor?-->
                            <p>Purchase time of ticket</p>
                            <p>
                                <input type="date" class="form-control mb-2" placeholder="Purchase time of ticket" @bind-value="T.PurchaseTime" />
                            </p>
                            <p>
                                <button type="submit" class="buttonAdd">Create Ticket</button>
                            </p>

                        </form>
                    </div>
                </div>
                <div class="col-12 col-md-6">
                    <div class="formContainer">
                        <h4>Update ticket</h4>
                        <ul>
                            @foreach (var ticket in tickets)
                            {
                                <li><a href="@ticket.Id">@ticket.Id</a></li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>


    </div>
</body>
@code {
    private Ticket T = new();
    private List<Ticket> tickets = new();
    private List<Screening> screenings = new();
    private List<CustomerData> customers = new();
    private int screeningId;
    private int customerId;
    private string Href(int id) => $"/admin/edit/ticket/{id}";
    protected override async Task OnInitializedAsync()
    {
        tickets = await TS.GetTicketsAsync();
        screenings = await SS.GetScreeningsAsync();
        customers = await CS.GetCustomersAsync();
    }
    private async Task createTicket()
    {
        await TS.CreateTicketAsync(T);
    }

    private async Task updateTicket()
    {
        //await TS.UpdateTicket(T);
    }

    private async Task deleteTicket()
    {
        //await TS.DeleteTicket((int)T.Id);
    }
    
}
<style>
    .forms {
        align-content: normal;
        justify-content: normal;
        gap: 3rem;
    }

    .formContainer {
        background: #23272f;
        border-radius: 1rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        border: 1px solid #2c313c;
        color: #f8f9fa;
        padding: 1.5rem 1.5rem 1rem 1.5rem;
        margin: 0.5rem 0;
        min-height: 100%;
    }

        .formContainer h4 {
            margin-bottom: 1rem;
            color: #aee1f9;
        }


    .formContainer {
        display: flex;
        flex-direction: column;
        min-width: 220px;
        padding: 1.5rem 1.5rem 1rem 1.5rem;
        margin: 0.5rem 0;
        background: #23272f;
        border-radius: 1rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        border: 1px solid #2c313c;
        color: #f8f9fa;
    }

        .formContainer h4 {
            margin-bottom: 1rem;
            color: #aee1f9;
        }

        .formContainer input,
        .formContainer button {
            margin-bottom: 0.7rem;
            border-radius: 0.4rem;
            border: 1px solid #444;
            padding: 0.5rem;
            background: #181a20;
            color: #f8f9fa;
        }

        .formContainer button {
            font-weight: 600;
            cursor: pointer;
            transition: background 0.2s;
        }

    .buttonDelete {
        background-color: #e74c3c;
    }

    .buttonAdd {
        background-color: #27ae60;
    }

    .buttonEdit {
        background-color: #2980b9;
    }
</style>


