@page "/admin/edit/people"
@using Ticketmaster.Data.Services.Interfaces
@using Ticketmaster.Objects
@inject IPeopleService PS
@inject ThemeService ThemeService
<body class="forms">
    <div class="container my-2">
        <div class="row g-4">
            <div class="col-12 col-md-6">
                <div class="formContainer">
                    <h4>Create person</h4>
                    <form onsubmit="@createPerson">
                        <p>Name</p>
                        <input type="text" class="form-control mb-2" placeholder="Name of person" @bind-value="P.Name" />

                        <p>Birthday</p>
                        <input type="date" class="form-control mb-2" placeholder="Birthday of person" @bind-value="P.BirthDate" />

                        <p>Nationality</p>
                        <input type="text" class="form-control mb-2" placeholder="Nationality of person" @bind-value="P.Nationality" />

                        <button type="submit" class="buttonAdd">Create Person</button>
                    </form>
                    <p>@text</p>
                </div>
            </div>

            <div class="col-12 col-md-6">
                <div class="formContainer">
                    <h4>Update person</h4>
                    <ul>
                        @foreach (var person in people)
                        {
                            <li>
                                <a href="@Href(person.Id)">@person.Name</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
</body>

@code {
    private Person P = new();
    private List<Person> people = new();
    private string text;
    private string Href(int id) => $"/admin/edit/person/{id}";
    protected override async Task OnInitializedAsync()
    {
        people = await PS.GetAllPeople();
    }
    private async Task createPerson()
    {
        await PS.CreatePerson(P);
        text = $"Person ({P.Name}) created";
        await OnInitializedAsync();
    }
}
@code {
    private string ThemeClass => ThemeService.IsLightTheme ? "light-theme" : "dark-theme";

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += ThemeChanged;
    }

    private async Task ThemeChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= ThemeChanged;
    }
}

<style>
    /* Scoped to forms container */
    .forms {
        padding: 2rem;
        min-height: 100vh;
        background-color: var(--bg-color);
        color: var(--text-color);
    }

    /* Form section wrapper */
    .formContainer {
        background-color: var(--card-bg);
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        margin-bottom: 2rem;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        /* Form input fields */
        .formContainer input[type="text"],
        .formContainer input[type="date"] {
            background-color: var(--input-bg, #fff);
            color: var(--text-color);
            border: 1px solid var(--color-gray-3);
            padding: 0.75rem;
            border-radius: 8px;
            width: 100%;
            font-size: 1rem;
        }

    /* Submit button */
    .buttonAdd {
        margin-top: 1rem;
        width: 100%;
        background-color: var(--color-blue);
        color: var(--color-white);
        padding: 0.75rem 1rem;
        font-weight: 600;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .buttonAdd:hover {
            background-color: var(--color-blue-hover);
        }

    /* Optional: list of people */
    .formContainer ul {
        padding-left: 1rem;
        margin-top: 1rem;
    }

    .formContainer li {
        padding: 0.25rem 0;
    }

    .formContainer a {
        color: var(--color-purple);
        text-decoration: none;
    }

        .formContainer a:hover {
            text-decoration: underline;
        }

</style>