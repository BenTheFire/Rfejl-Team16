@page "/"
@using Ticketmaster.Data
@using Ticketmaster.Data.Services.Interfaces
@using Ticketmaster.Data.Services.StaticServiceMethods
@using Ticketmaster.Objects
@inject ITicketMasterService TMS

<PageTitle>Index</PageTitle>

<body>
    @if (!isLoaded)
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
            <div>
                <h2>Loading...</h2>
                <img src="./Loading.gif" alt="Loading" style="width:128px;height:128px" />
            </div>
        </div>
    }
    else
    {
        <div class="content">
            <div class="movie-container">
                <div class="movie-header">
                    <h2 style="color: var(--accent-text-color);">Now Showing</h2>
                </div>
                <div class="info-section">
                    <div class="screenings">
                        <div class="row">
                            @foreach (var movie in fetchedMovies)
                            {
                                <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                                    <NavLink href="@HrefMovieLink(movie)" class="text-decoration-none">
                                        <div class="card">
                                            <img src="@movie.ImageSource" alt="Movie Poster" class="poster" />
                                            <div class="card-body">
                                                <h5 class="card-title" style="color: var(--color-blue);">
                                                    @movie.Title (@movie.ReleaseDate)
                                                </h5>
                                                <h5 class="card-title">
                                                    @GetMovieLength(movie.LengthInSeconds).ToShortTimeString()
                                                </h5>
                                            </div>
                                        </div>
                                    </NavLink>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</body>
@code
{
    bool isLoaded = false;
    public List<Movie> fetchedMovies = new();
    protected override async Task OnInitializedAsync()
    {
        await TMS.UpdateImagesAndDateAsync();
        await FetchMovies();
    }

    public async Task FetchMovies()
    {
        fetchedMovies = await TMS.FetchMoviesByCount(20);
        isLoaded = true;
    }

    //Másodperceket TimeOnly-ba konvertálni
    public TimeOnly GetMovieLength(int timeInSeconds)
    {
        int hour = timeInSeconds / 3600;
        timeInSeconds %= 3600;
        int minute = timeInSeconds / 60;
        timeInSeconds %= 60;
        int second = timeInSeconds;

        return new(hour, minute, second);
    }

    //Kis függvény az oldalak közötti váltásra
    public string HrefMovieLink(Movie movie) => $"/movies/{(movie.ImdbId):D7}";
}
<style>
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');

</style>