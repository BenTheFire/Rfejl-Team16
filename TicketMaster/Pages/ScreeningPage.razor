@page "/screening/{screeningId}"
@using Ticketmaster.Objects;
@using Ticketmaster.Data.DTOs;
@inject Ticketmaster.Data.Services.Interfaces.IScreeningService SS
@inject Ticketmaster.Data.Services.Interfaces.ITicketService TS

<body>
    @if (screening != null) {
        <h3>Screening of @screening.OfMovie.Title on @screening.Time.ToString("yyyy-MM-dd HH:mm")</h3>
        <p>Filled slots: @screening.SeatsTaken</p>
        <form onsubmit="@buyTicket">
            <input type="number" placeholder="ID of customer" @bind-value="T.CustomerId" />
            <input type="text" placeholder="Seat position" @bind-value="T.Seat" />
            <button type="submit" class="buttonAdd">Buy Ticket</button>
        </form>
        <button onclick="@buyTicket">Buy Ticket for screening</button>
    }
    else
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh">
            <div>
                <h2>Loading...</h2>
                <img src=".\Loading.gif" alt="..." style="width:128px;height:128px" />
            </div>
        </div>
    }
</body>


@code {
    [Parameter] public string ScreeningId { get; set; }

    private Screening? screening;

    private TicketDTO T;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            int id = int.Parse(ScreeningId);
            screening = await SS.GetScreeningByIdAsync(id);
            Console.WriteLine(id);

            Console.WriteLine(screening.OfMovie.Title);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            screening = null;
        }
    }
    protected async Task buyTicket()
    {
        T.Status = 2; //pending
        T.Price = 10;
        T.PurchaseTime = DateTime.UtcNow;
        T.ByVendorId = 1;
        //await TS.CreateTicket(T);
    }
}
