@page "/Tickets"
@using System.Security.Claims
@using Ticketmaster.Objects;
@using Ticketmaster.Data.DTOs;
@using Microsoft.AspNetCore.Identity;
@inject Ticketmaster.Data.Services.Interfaces.IScreeningService SS
@inject Ticketmaster.Data.Services.Interfaces.ITicketService TS
@inject Ticketmaster.Data.Services.Interfaces.ICustomerService CS
@inject Ticketmaster.Data.Services.Interfaces.ILocationService LS
@inject Ticketmaster.Data.Services.Interfaces.IUserService US
@inject AuthenticationStateProvider ASP

<body>
    @if (user != null && userTickets != null) 
    {
        <CascadingAuthenticationState>
            <AuthorizeView>
                <Authorized>
                    <h1>My tickets</h1>

                    <ul>
                        @foreach (Ticket tckt in userTickets)
                        {
                            <li>
                                <div>
                                    <strong>@tckt.OfScreening.OfMovie.Title</strong> at @tckt.OfScreening.Time
                                    <br />
                                    <p>Cinema: @tckt.OfScreening.InLocation.Name, @tckt.OfScreening.InLocation.Address</p>
                                </div>
                            </li>    
                        }
                    </ul>
                </Authorized>
                <NotAuthorized>
                    <div style="margin:auto"><h1>403 You are not logged in</h1></div>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    }
    else
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh">
            <div>
                <h2>Loading...</h2>
                <img src="./Loading.gif" alt="..." style="width:128px;height:128px" />
            </div>
        </div>
    }
</body>

@code {
    IdentityUser user = new();
    List<Ticket> userTickets = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await ASP.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier).Value;
            if (userId != null)
            {
                user = await US.GetUserByIdAsync(userId);
                userTickets = await TS.GetTicketsByUserIdAsync(user.Id);
            }
        }
        else
        {
            userTickets = new List<Ticket>();
        }
    }

}
