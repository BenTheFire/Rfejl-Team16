@page "/movies/{id}"
@using TicketMaster.Data
@using TicketMaster.Data.DTOs
@using TicketMaster.Data.Services.Interfaces
@using TicketMaster.Data.Services.StaticServiceMethods
@using TicketMaster.Objects
@inject IMovieService IMS

@code {
    [Parameter] public string Id { get; set; }

    public Movie movieData;
    public List<Casting> castData = new();
    public List<Screening> screeningData = new();
    public string imageLink;

    protected override async Task OnInitializedAsync()
    {
        var result = await IMS.FetchMovieDataAsync(Id);
        movieData = result.Movie;
        castData = result.Cast;
        screeningData = await IMS.FetchScreenings(Id);
    }

    public string GetMovieDW()
    {
        List<Casting> Director = castData.Where(c => c.Role == "Director").ToList();
        List<Casting> Writer = castData.Where(c => c.Role == "Writer").ToList();

        string MovieDW = "";
        if (Director.Count > 0)
        {
            if (Director.Count == 1 && Writer.Count == 1 && Writer[0]==Director[0])
            {
                MovieDW = $"Written and Directed by {Director[0].Person.Name}"; 
            }
            else
            {
                MovieDW += " Directed by: " + string.Join(", ", Director.Select(d => d.Person.Name))
                + (Writer.Count == 0 ? ", " : "");
            }
        }
        if (Writer.Count > 0)
        {
            if (Director.Count == 1 && Writer.Count == 1 && Writer[0] == Director[0])
            {
                MovieDW = $"Written and Directed by {Director[0].Person.Name}";
            }
            else
            {
                MovieDW += " Written by: " + string.Join(", ", Writer.Select(w => w.Person.Name));
            }
        }
        if (!Director.Any() && !Writer.Any())
        {
            MovieDW = "Unknown Director and Writer";
        }
        return MovieDW;
    }
    private string ConvertToHoursAndMinutes(int seconds)
    {
        int hours = seconds / 3600;
        int minutes = (seconds % 3600) / 60;

        if (hours > 0)
        {
            return $"{hours}h {minutes}min";
        }
        else
        {
            return $"{minutes}min";
        }
    }
    public string HrefScreeningLink(Screening screening) => $"/screening/{screening.Id}";
}

<body>
    @if (movieData != null)
    {
        <div class="movie-container">
            <div class="movie-header">
                <img src="@movieData.ImageSource" alt="@movieData.Title Poster" class="poster" />
                <div class="movie-details">
                    <h2>@movieData.Title (@movieData.ReleaseDate)</h2>
                    <p class="meta">@GetMovieDW()</p>
                    <p class="description">@movieData.Description</p>
                    <p class="description">@ConvertToHoursAndMinutes(movieData.LengthInSeconds)</p>
                </div>
            </div>

            <div class="info-section">
                <div class="screenings">
                    <h3>Screenings</h3>
                    <ul>
                        @foreach (var screening in screeningData)
                        {
                            <a href="@HrefScreeningLink(screening)">
                                <li class="screenings">
                                    <strong>@screening.Time.ToString("yyyy-MM-dd HH:mm")</strong><br />
                                    @screening.InLocation.Name - @screening.InLocation.Address<br />
                                    <span>Seats: @screening.SeatsTaken / @screening.InLocation.Capacity</span>
                                </li>
                            </a>  
                        }
                    </ul>
                </div>

                <div class="cast">
                    <h3>Cast</h3>
                    <ul>
                        @foreach (var casting in castData)
                        {
                            <li><strong>@casting.Role:</strong> @casting.Person.Name</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
    else
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh">
            <div>
                <h2>Loading...</h2>
                <img src=".\Loading.gif" alt="..." style="width:128px;height:128px" />
            </div>
        </div>
    }

</body>
<style>
.movie-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 1rem;
    background-color: #1e1e1e;
    color: #fff;
    border-radius: 1rem;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
}

.movie-header {
    display: flex;
    flex-direction: row;
    gap: 2rem;
    margin-bottom: 2rem;
}

.poster {
    width: 200px;
    height: 300px;
    object-fit: cover;
    border-radius: 0.5rem;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
}

.movie-details {
    flex: 1;
}

    .movie-details h2 {
        margin: 0 0 0.5rem 0;
        font-size: 2rem;
    }

.meta {
    font-size: 0.95rem;
    color: #aaa;
    margin-bottom: 1rem;
}

.description {
    font-size: 1rem;
    line-height: 1.6;
    color: #ddd;
}

.info-section {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
}

.screenings, .cast {
    flex: 1 1 45%;
    background-color: #2a2a2a;
    padding: 1rem;
    border-radius: 0.5rem;
}

    .screenings ul, .cast ul {
        list-style: none;
        padding-left: 0;
    }

    .screenings a, .cast a {
        margin-bottom: 1rem;
        background: #333;
        padding: 0.75rem;
        border-radius: 0.5rem;
        line-height: 1.4;
    }


.poster {
    width: 100%;
    max-width: 300px;
    height: auto;
}

.info-section {
    flex-direction: column;
}
</style>
