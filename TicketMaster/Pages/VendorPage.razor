@page "/VendorPage"
@using System.Security.Claims
@using Ticketmaster.Objects;
@using Ticketmaster.Data.DTOs;
@using Microsoft.AspNetCore.Identity;
@inject Ticketmaster.Data.Services.Interfaces.IScreeningService SS
@inject Ticketmaster.Data.Services.Interfaces.ITicketService TS
@inject Ticketmaster.Data.Services.Interfaces.ICustomerService CS
@inject Ticketmaster.Data.Services.Interfaces.ILocationService LS
@inject Ticketmaster.Data.Services.Interfaces.IUserService US
@inject AuthenticationStateProvider ASP

<body>
    @if(vendor != null) {
        <CascadingAuthenticationState>
            <AuthorizeView Roles="Vendor">
                <Authorized>
                    <p>Welcome: @vendor.UserName</p>
                    <p>Email: @vendor.Email</p>
                    <p>Location: @location.Name</p>
                    <p>Address: @location.Address</p>
                    <p>Tickets</p>
                    <ul>
                        @foreach(var swt in screeningsWithTickets)
                        {
                            <li>
                                <h4>@swt.Screening.OfMovie.Title</h4>
                                <p>Screening time: @swt.Screening.Time</p>
                                <p>Tickets:</p>
                                <ul>
                                    @foreach (var ticket in swt.Tickets)
                                    {
                                        <li><div>
                                                @if (ticket.Customer.OfUser != null)
                                                {
                                                    <p>Ticket ID: @ticket.Id</p>
                                                    <p>Ticket status: @switch(ticket.Status)
                                                        { case 0:
                                                                <p>Unset</p>;
                                                                break; 
                                                          case 1:
                                                                <p>Accepted</p>
                                                                break;
                                                            case 2:
                                                                <p>Rejected</p>
                                                                break;
                                                            default: break; }
                                                        </p>
                                                    <p>Customer name:
                                                        @ticket.Customer.OfUser.UserName</p>
                                                <p>Customer email: @ticket.Customer.Email</p>
                                            }
                                            else
                                            {
                                                <p>Ticket ID: @ticket.Id</p>
                                                    <p>
                                                        Ticket status: @switch (ticket.Status)
                                                        {
                                                            case 0:
                                                            <p>Unset</p>
                                                                ;
                                                                break;
                                                            case 1:
                                                            <p>Accepted</p>
                                                                break;
                                                            case 2:
                                                            <p>Rejected</p>
                                                                break;
                                                            default: break;
                                                        }
                                                    </p>
                                                <p>Customer phone: @ticket.Customer.Phone</p>
                                                <p>Customer email: @ticket.Customer.Email</p>
                                            }
                                            </div>
                                            <div>
                                                <button @onclick="() => setStatus(ticket, 0)">0</button>
                                                <button @onclick="() => setStatus(ticket, 1)">1</button>
                                                <button @onclick="() => setStatus(ticket, 2)">2</button>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </li>
                        }
                    </ul>
                </Authorized>
                <NotAuthorized>
                    <div style="margin:auto"><h1>403 Forbidden</h1></div>
                </NotAuthorized>
            </AuthorizeView>
        </CascadingAuthenticationState>
    }
    else
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100vh">
            <h1>Loading...</h1>
        </div>
    }
</body>

@code {
    IdentityUser vendor = new();

    List<Ticket> tickets = new();

    Location location = new();

    private class ScreeningWithTickets
    {
        public Screening Screening { get; set; }
        public List<Ticket> Tickets { get; set; }
    }

    private List<ScreeningWithTickets> screeningsWithTickets = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await ASP.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var vendorId = authState.User.FindFirst(ClaimTypes.NameIdentifier).Value;
            if (vendorId != null)
            {
                vendor = await US.GetUserByIdAsync(vendorId);
                location = await LS.GetLocationByVendorIdAsync(vendorId);
            }
        }
        if (location != null)
        {
            tickets = await TS.GetTicketsByVendorIdAsync(vendor.Id);
            foreach (var ticket in tickets)
            {
                if (screeningsWithTickets.Select(o => o.Screening).Contains(ticket.OfScreening))
                {
                    screeningsWithTickets.Where(o => o.Screening == ticket.OfScreening).Single().Tickets.Add(ticket);
                }   
                else
                {
                    screeningsWithTickets.Add(new ScreeningWithTickets
                        {
                            Screening = ticket.OfScreening,
                            Tickets = new List<Ticket> { ticket }
                        });
                }
            }
        }
        else
        {
            tickets = null;
        }
        
    }
    private async Task setStatus(Ticket ticket, int status)
    {
        ticket.Status = status;
        await TS.UpdateTicketAsync(ticket);
        await OnInitializedAsync();
    }
    private string Href(int id) => $"/VendorPage/ticket/{id}";
}
